{"ast":null,"code":"var _jsxFileName = \"/Users/eddiediaz/repos/Redux/client/src/components/ProductItem/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"; // Replace global context with react-redux methods\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\"; //selector to read data from initial state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst selectCart = state => state.cart;\n\nfunction ProductItem(item) {\n  _s();\n\n  //useSelector and useDispatch hooks\n  const cart = useSelector(selectCart);\n  const dispatch = useDispatch();\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const addToCart = () => {\n    const itemInCart = cart.find(cartItem => cartItem._id === _id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', { ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item,\n          purchaseQuantity: 1\n        }\n      });\n      idbPromise('cart', 'put', { ...item,\n        purchaseQuantity: 1\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card px-1 py-1\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: `/products/${_id}`,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        alt: name,\n        src: `/images/${image}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [quantity, \" \", pluralize(\"item\", quantity), \" in stock\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"$\", price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addToCart,\n      children: \"Add to cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProductItem, \"ecWlw9hQmiN1BKXN3G5mczU/ZzA=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ProductItem;\nexport default ProductItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductItem\");","map":{"version":3,"sources":["/Users/eddiediaz/repos/Redux/client/src/components/ProductItem/index.js"],"names":["React","Link","pluralize","useSelector","useDispatch","ADD_TO_CART","UPDATE_CART_QUANTITY","idbPromise","selectCart","state","cart","ProductItem","item","dispatch","image","name","_id","price","quantity","addToCart","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,SAAT,QAA0B,qBAA1B,C,CAEA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,WAAT,EAAsBC,oBAAtB,QAAkD,qBAAlD;AACA,SAASC,UAAT,QAA2B,qBAA3B,C,CAEA;;;;AACA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAlC;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAAA;;AAEzB;AACA,QAAMF,IAAI,GAAGP,WAAW,CAACK,UAAD,CAAxB;AACA,QAAMK,QAAQ,GAAGT,WAAW,EAA5B;AAEA,QAAM;AACJU,IAAAA,KADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,GAHI;AAIJC,IAAAA,KAJI;AAKJC,IAAAA;AALI,MAMFN,IANJ;;AAQA,QAAMO,SAAS,GAAG,MAAM;AACtB,UAAMC,UAAU,GAAGV,IAAI,CAACW,IAAL,CAAWC,QAAD,IAAcA,QAAQ,CAACN,GAAT,KAAiBA,GAAzC,CAAnB;;AACA,QAAII,UAAJ,EAAgB;AACdP,MAAAA,QAAQ,CAAC;AACPU,QAAAA,IAAI,EAAEjB,oBADC;AAEPU,QAAAA,GAAG,EAAEA,GAFE;AAGPQ,QAAAA,gBAAgB,EAAEC,QAAQ,CAACL,UAAU,CAACI,gBAAZ,CAAR,GAAwC;AAHnD,OAAD,CAAR;AAKAjB,MAAAA,UAAU,CAAC,MAAD,EAAS,KAAT,EAAgB,EACxB,GAAGa,UADqB;AAExBI,QAAAA,gBAAgB,EAAEC,QAAQ,CAACL,UAAU,CAACI,gBAAZ,CAAR,GAAwC;AAFlC,OAAhB,CAAV;AAID,KAVD,MAUO;AACLX,MAAAA,QAAQ,CAAC;AACPU,QAAAA,IAAI,EAAElB,WADC;AAEPqB,QAAAA,OAAO,EAAE,EAAE,GAAGd,IAAL;AAAWY,UAAAA,gBAAgB,EAAE;AAA7B;AAFF,OAAD,CAAR;AAIAjB,MAAAA,UAAU,CAAC,MAAD,EAAS,KAAT,EAAgB,EAAE,GAAGK,IAAL;AAAWY,QAAAA,gBAAgB,EAAE;AAA7B,OAAhB,CAAV;AACD;AACF,GAnBD;;AAqBA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,EAAE,EAAG,aAAYR,GAAI,EAA3B;AAAA,8BACE;AACE,QAAA,GAAG,EAAED,IADP;AAEE,QAAA,GAAG,EAAG,WAAUD,KAAM;AAFxB;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAA,kBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAQE;AAAA,8BACE;AAAA,mBAAMG,QAAN,OAAiBhB,SAAS,CAAC,MAAD,EAASgB,QAAT,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,wBAAQD,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YARF,eAYE;AAAQ,MAAA,OAAO,EAAEE,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAnDQR,W;UAGMR,W,EACIC,W;;;KAJVO,W;AAqDT,eAAeA,WAAf","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n\n// Replace global context with react-redux methods\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\n//selector to read data from initial state\nconst selectCart = state => state.cart;\n\nfunction ProductItem(item) {\n\n  //useSelector and useDispatch hooks\n  const cart = useSelector(selectCart);\n  const dispatch = useDispatch();\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  }\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n"]},"metadata":{},"sourceType":"module"}