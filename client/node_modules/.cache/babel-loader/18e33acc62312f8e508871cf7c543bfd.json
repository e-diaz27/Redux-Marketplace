{"ast":null,"code":"var _jsxFileName = \"/Users/eddiediaz/repos/Redux/client/src/pages/Detail.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport Cart from '../components/Cart'; // Replace global context with react-redux methods\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY, ADD_TO_CART, UPDATE_PRODUCTS } from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport spinner from '../assets/spinner.gif'; //selector functions to read data from initial state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst selectCart = state => state.cart;\n\nconst selectProducts = state => state.products;\n\nfunction Detail() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [currentProduct, setCurrentProduct] = useState({});\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS); //useSelector and useDispatch hooks\n\n  const cart = useSelector(selectCart);\n  const products = useSelector(selectProducts);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    } // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then(indexedProducts => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find(cartItem => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', { ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct,\n          purchaseQuantity: 1\n        }\n      });\n      idbPromise('cart', 'put', { ...currentProduct,\n        purchaseQuantity: 1\n      });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n    idbPromise('cart', 'delete', { ...currentProduct\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [currentProduct && cart ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-1\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"\\u2190 Back to Products\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: currentProduct.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentProduct.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Price:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), \"$\", currentProduct.price, ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addToCart,\n          children: \"Add to Cart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !cart.find(p => p._id === currentProduct._id),\n          onClick: removeFromCart,\n          children: \"Remove from Cart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `/images/${currentProduct.image}`,\n        alt: currentProduct.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this) : null, loading ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: spinner,\n      alt: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 18\n    }, this) : null, /*#__PURE__*/_jsxDEV(Cart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Detail, \"JAVCyJZ36DzN1vZR/Y/79SPKue0=\", false, function () {\n  return [useParams, useQuery, useSelector, useSelector, useDispatch];\n});\n\n_c = Detail;\nexport default Detail;\n\nvar _c;\n\n$RefreshReg$(_c, \"Detail\");","map":{"version":3,"sources":["/Users/eddiediaz/repos/Redux/client/src/pages/Detail.js"],"names":["React","useEffect","useState","Link","useParams","useQuery","Cart","useSelector","useDispatch","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","ADD_TO_CART","UPDATE_PRODUCTS","QUERY_PRODUCTS","idbPromise","spinner","selectCart","state","cart","selectProducts","products","Detail","id","currentProduct","setCurrentProduct","loading","data","dispatch","length","find","product","_id","type","forEach","then","indexedProducts","addToCart","itemInCart","cartItem","purchaseQuantity","parseInt","removeFromCart","name","description","price","p","image"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport Cart from '../components/Cart';\n\n// Replace global context with react-redux methods\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport spinner from '../assets/spinner.gif';\n\n//selector functions to read data from initial state\nconst selectCart = state => state.cart;\nconst selectProducts = state => state.products;\n\nfunction Detail() {\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  //useSelector and useDispatch hooks\n  const cart = useSelector(selectCart);\n  const products = useSelector(selectProducts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts,\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 },\n      });\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id,\n    });\n\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!cart.find((p) => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n"]},"metadata":{},"sourceType":"module"}